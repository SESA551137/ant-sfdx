<?xml version="1.0" encoding="UTF-8"?>

<project name="ant-sfdx" default="default" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless" xmlns:ivy="antlib:org.apache.ivy.ant">
  <description>Builds, tests, and runs the project ant-sfdx.</description>

  <property name="verbosity" value="info" />

  <property environment="env" />
  <property name="var.ANT_HOME" value="${env.ANT_HOME}" />

  <property name="bin.dir" value="${basedir}/bin" />
  <property name="ivy.dir" value="${basedir}/ivy" />
  <property name="tmp.dir" value="${basedir}/tmp" />

  <property name="ivy.lib.dir" value="${ivy.dir}/lib" />

  <property name="src.dir" value="${basedir}/src/main" />
  <property name="test.dir" value="${basedir}/src/test" />

  <property name="tmp.bin.dir" value="${tmp.dir}/bin" />
  <property name="tmp.obj.dir" value="${tmp.dir}/obj" />
  <property name="tmp.out.dir" value="${tmp.dir}/out" />
  <property name="tmp.test.dir" value="${tmp.dir}/test" />

  <property name="tmp.out.bin.dir" value="${tmp.out.dir}/bin" />

  <import file="nbproject/build-impl.xml" />



  <!-- prepare -->
  <target name="prepare" depends="prepare.log" />
  <target name="-pre-init" depends="prepare.log,prepare.ivy" />

  <target name="prepare.ivy">
    <pathconvert property="ivy.classpath" dirsep="/" pathsep=":">
      <path>
        <fileset dir="${ivy.lib.dir}/runtime" includes="**/*.jar" />
      </path>
      <map from="${basedir}${file.separator}" to="" />
    </pathconvert>
    <pathconvert property="ivy.test.classpath" dirsep="/" pathsep=":">
      <path>
        <fileset dir="${ivy.lib.dir}/test" includes="**/*.jar" />
      </path>
      <map from="${basedir}${file.separator}" to="" />
    </pathconvert>
    <uptodate property="prepare.ivy.nbproject.isuptodate" srcfile="${basedir}/ivy.xml" targetfile="nbproject/project.properties" />
    <propertyfile file="nbproject/project.properties" unless:set="prepare.ivy.nbproject.isuptodate">
      <entry operation="=" key="ivy.classpath" value="${ivy.classpath}" />
      <entry operation="=" key="ivy.test.classpath" value="${ivy.test.classpath}" />
    </propertyfile>
  </target>

  <target name="prepare.log">
    <record name="${basedir}/build.log" loglevel="${verbosity}" append="false" />
  </target>

  <target name="prepare.tmp">
    <mkdir dir="${tmp.dir}" />
  </target>



  <!-- clean  (already defined by NetBeans) -->
  <target name="-post-clean" depends="clean.tmp" />

  <target name="clean.tmp">
    <delete dir="${tmp.dir}" includeemptydirs="true" quiet="true" failonerror="false" />
  </target>

  <target name="clean.ivy">
    <delete dir="${ivy.lib.dir}" includeemptydirs="true" quiet="true" failonerror="false" />
  </target>



  <!-- compile  (already defined by NetBeans) -->
  <target name="-pre-compile" depends="prepare.ivy" />
  <target name="-pre-compile-single" depends="prepare.ivy" />



  <!-- test  (already defined by NetBeans) -->
  <target name="test-report" if="have.tests" depends="init">
    <junitreport todir="${tmp.dir}" tofile="junit-results.xml">
      <fileset dir="${tmp.obj.dir}/test/results">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${tmp.dir}/junit-results" />
    </junitreport>
  </target>



  <!-- analysis -->
  <target name="analysis" depends="prepare.log,analysis.pmd,analysis.cloc" description="Performs code analysis on the project." />

  <target name="analysis.cloc" depends="prepare.tmp" description="Runs CLOC on the project.">
    <exec executable="${bin.dir}/cloc.exe" osfamily="windows">
      <arg value="--3" />
      <arg line="--progress-rate=0" />
      <arg value="--xml" />
      <arg line="--out &quot;${tmp.dir}/cloc-results.xml&quot;" />
      <arg value="src" />
    </exec>
    <exec executable="perl" osfamily="unix">
      <arg line="&quot;${bin.dir}/cloc.pl&quot;" />
      <arg value="--3" />
      <arg line="--progress-rate=0" />
      <arg value="--xml" />
      <arg line="--out &quot;${tmp.dir}/cloc-results.xml&quot;" />
      <arg value="src" />
    </exec>
  </target>

  <target name="analysis.pmd" depends="prepare.tmp,prepare.ivy,init" description="Runs PMD on the project.">
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" />
    <condition property="pmd.formatter" value="textcolor" else="text">
      <os family="unix" />
    </condition>

    <pmd failOnRuleViolation="true" cacheLocation="${tmp.obj.dir}/pmd.cache">
      <fileset dir="${src.dir}">
        <include name="**/*.java" />
      </fileset>
      <sourceLanguage name="java" version="${javac.source}"/>
      <ruleset>${basedir}/.ruleset.xml</ruleset>
      <formatter type="${pmd.formatter}" toConsole="true" />
      <formatter type="html" toFile="${tmp.dir}/pmd-results.html" />
      <formatter type="xml" toFile="${tmp.dir}/pmd-results.xml" />
    </pmd>
  </target>



  <!-- package -->
  <target name="package" depends="prepare.log,jar" description="Packages the project.">
    <copy file="${dist.jar}" todir="${tmp.out.bin.dir}" preservelastmodified="true" />
  </target>



  <!-- build -->
  <target name="build" depends="prepare.log,compile,test,analysis" description="Builds the project." />
  <!-- rebuild -->
  <target name="rebuild" depends="prepare.log,clean,build" description="Rebuilds the project." />
  <!-- release -->
  <target name="release" depends="prepare.log,rebuild,package" description="Creates a release for the project." />
</project>
